# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CS2nFgGxITQB2-fKVq5v8_kyevLAn0A4
"""

import numpy as np
import pandas as pd
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('churn_modelling.csv')

df

df.shape

df.size

df.info()

df.describe()

df.head()

df = df.drop(columns = ['RowNumber','CustomerId','Surname'])

df.head()

df.isnull().sum()

X = df.iloc[:,:-1].values
y = df.iloc[:,-1]

X.shape

y.shape

from sklearn.preprocessing import LabelEncoder,OneHotEncoder
from sklearn.compose import ColumnTransformer

label_encoder = LabelEncoder()

X[:,1]=label_encoder.fit_transform(X[:,1])

print(X)

X[:,2]=label_encoder.fit_transform(X[:,2])

X

transform = ColumnTransformer([('Countries',OneHotEncoder(),[1])],remainder="passthrough")

X=transform.fit_transform(X)

X

X = X[:,1:]

X.shape

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.2, random_state=0)

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()

df1 = pd.DataFrame(X)
print(df1)

X_train[:,np.array([2,4,5,6,7,10])]=sc.fit_transform(X_train[:,np.array([2,4,5,6,7,10])])

X_test[:,np.array([2,4,5,6,10])]=sc.fit_transform(X_test[:,np.array([2,4,5,6,10])])

X_train

X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)

import tensorflow as tf

from tensorflow.keras.models import Sequential

model=Sequential()

from tensorflow.keras.layers import Dense

model.add(Dense(activation='relu',input_dim=11,units=256,kernel_initializer='uniform'))

model.add(Dense(activation='relu',units=512,kernel_initializer='uniform'))

model.add(Dense(activation='relu',units=256,kernel_initializer='uniform'))

model.add(Dense(activation='relu',units=128,kernel_initializer='uniform'))

model.add(Dense(activation='sigmoid',units=1,kernel_initializer='uniform'))

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

model.summary()

model.fit(X_train,y_train, validation_data=(X_test,y_test),epochs=20,batch_size=32)

y_pred = model.predict(X_test)

y_pred

y_pred = (y_pred>0.5)

y_pred

from sklearn.metrics import confusion_matrix, classification_report

cm = confusion_matrix(y_test,y_pred)
print(cm)

print("Classification Report : \n",classification_report(y_test,y_pred))

acc = ((cm[0][0] + cm[1][1])*100 / (cm[0][0] + cm[1][1] + cm[0][1] + cm[1][0]))

print(acc,"% of data was classified accurately !")