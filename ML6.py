# -*- coding: utf-8 -*-
"""ML6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lC_MG0xhcaKO4-TcOfFkbO2_GWjTznGT
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from scipy.cluster.hierarchy import dendrogram, linkage
import seaborn as sns

data = pd.read_csv("sales_data_sample.csv", encoding="ISO-8859-1")

# Handle missing values
data['ADDRESSLINE2'].fillna('', inplace=True)
data['STATE'].fillna('', inplace=True)
data['POSTALCODE'].fillna(0, inplace=True)
data['TERRITORY'].fillna('', inplace=True)

# Choose appropriate columns for clustering (e.g., 'QUANTITYORDERED' and 'PRICEEACH')
X = data[['QUANTITYORDERED', 'PRICEEACH']]

# Perform K-Means clustering to find the optimal number of clusters
wcss = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, init='k-means++', max_iter=300, n_init=10, random_state=0)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)

# Plot the elbow method graph to determine the number of clusters
plt.figure(figsize=(8, 6))
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method for K-Means')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('WCSS')
plt.show()

# Based on the elbow method, choose the number of clusters (e.g., 3)
k = 3
kmeans = KMeans(n_clusters=k, init='k-means++', max_iter=300, n_init=10, random_state=0)
kmeans.fit(X)

# Add cluster labels to the original dataset
data['KMeans_Cluster'] = kmeans.labels_

# Perform hierarchical clustering
Z = linkage(X, method='ward')

# Plot the dendrogram
plt.figure(figsize=(10, 7))
dendrogram(Z)
plt.title('Hierarchical Clustering Dendrogram')
plt.xlabel('Samples')
plt.ylabel('Distance')
plt.show()

# You can visually inspect the dendrogram to determine the optimal number of clusters for hierarchical clustering.

# You can assign cluster labels to your data based on the hierarchical clustering results and further analyze and visualize the results as needed.

# Visualize the K-Means clusters (scatter plot)
plt.figure(figsize=(10, 7))
sns.scatterplot(data=data, x='QUANTITYORDERED', y='PRICEEACH', hue='KMeans_Cluster', palette='viridis', legend='full')
plt.title('K-Means Clusters')
plt.show()